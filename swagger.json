{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"AreaI": {
				"properties": {
					"name": {
						"type": "string"
					},
					"company": {
						"$ref": "#/components/schemas/CompanyI"
					}
				},
				"required": [
					"name",
					"company"
				],
				"type": "object",
				"additionalProperties": true
			},
			"UserI": {
				"properties": {
					"_id": {
						"type": "string",
						"description": "Mongo Document Id"
					},
					"username": {
						"type": "string",
						"description": "Username"
					},
					"email": {
						"type": "string",
						"description": "User email"
					},
					"userId": {
						"type": "string",
						"description": "Business User Id"
					},
					"password": {
						"type": "string",
						"description": "Password encrypted"
					},
					"firstName": {
						"type": "string",
						"description": "user first name"
					},
					"lastName": {
						"type": "string",
						"description": "User last name"
					},
					"active": {
						"type": "boolean",
						"description": "Is the user active?"
					},
					"externalUser": {
						"type": "boolean",
						"description": "External User. If true is external user that has participation in OpenChallenges"
					},
					"areaVisible": {
						"items": {
							"$ref": "#/components/schemas/AreaI"
						},
						"type": "array",
						"description": "Area that is visible for user"
					},
					"updated": {
						"type": "string",
						"format": "date-time",
						"description": "Last user update"
					},
					"points": {
						"type": "number",
						"format": "double",
						"description": "Resume: Points earned for participation in platform."
					}
				},
				"required": [
					"username",
					"email",
					"userId",
					"password",
					"firstName",
					"lastName",
					"active",
					"externalUser",
					"points"
				],
				"type": "object",
				"additionalProperties": true
			},
			"CompanyI": {
				"properties": {
					"_id": {},
					"companyId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"CNPJ": {
						"type": "string"
					},
					"committe": {
						"items": {
							"$ref": "#/components/schemas/UserI"
						},
						"type": "array"
					}
				},
				"required": [
					"companyId"
				],
				"type": "object",
				"additionalProperties": true
			},
			"AreaBody": {
				"properties": {
					"name": {
						"type": "string"
					},
					"companyId": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"companyId"
				],
				"type": "object",
				"additionalProperties": true
			},
			"UserBody": {
				"description": "User interface used just for create a user",
				"properties": {
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"password",
					"email",
					"first_name",
					"last_name"
				],
				"type": "object",
				"additionalProperties": true
			},
			"Login": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": true
			},
			"AreaResponse": {
				"properties": {
					"name": {
						"type": "string"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": true
			},
			"UserResponse": {
				"properties": {
					"area_visible": {
						"items": {
							"$ref": "#/components/schemas/AreaResponse"
						},
						"type": "array"
					},
					"external_user": {
						"type": "boolean"
					},
					"active": {
						"type": "boolean"
					},
					"points": {
						"type": "number",
						"format": "double"
					},
					"username": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					}
				},
				"required": [
					"area_visible",
					"external_user",
					"active",
					"points",
					"username",
					"email",
					"first_name",
					"last_name"
				],
				"type": "object",
				"additionalProperties": true
			},
			"SolutionResponse": {
				"properties": {
					"inserted_by": {
						"$ref": "#/components/schemas/UserResponse",
						"description": "User that inserted the solution"
					},
					"author": {
						"$ref": "#/components/schemas/UserResponse"
					},
					"created": {
						"type": "string",
						"format": "date-time"
					},
					"status": {
						"type": "string"
					},
					"updated": {
						"type": "string",
						"format": "date-time"
					},
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"WSALevel": {
						"type": "string"
					},
					"file_complementary": {
						"type": "string"
					},
					"reactions": {
						"properties": {
							"comments": {
								"type": "number",
								"format": "double"
							},
							"confused": {
								"type": "number",
								"format": "double"
							},
							"likes": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"comments",
							"confused",
							"likes"
						],
						"type": "object"
					},
					"challengeId": {
						"type": "string",
						"description": "challenge associated"
					},
					"is_private": {
						"type": "boolean",
						"description": "Always is setting this attribute. Could be setting by user or committe.\nDepends on solution configuration"
					},
					"time_in_park": {
						"type": "number",
						"format": "double",
						"description": "Always is setting this attribute. Depends on solution configuration"
					},
					"solutionId": {
						"type": "string",
						"description": "Solution ID"
					}
				},
				"required": [
					"inserted_by",
					"created",
					"status",
					"updated",
					"title",
					"description",
					"images",
					"WSALevel",
					"file_complementary",
					"reactions",
					"is_private",
					"time_in_park",
					"solutionId"
				],
				"type": "object",
				"additionalProperties": true
			},
			"SolutionBody": {
				"properties": {
					"author": {
						"type": "string"
					},
					"coauthor": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Not used for challenge"
					},
					"team": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"WSALevel": {
						"type": "string",
						"enum": [
							"COMPANY",
							"AREA"
						]
					},
					"group_validator": {
						"type": "string"
					},
					"file_complementary": {
						"type": "string"
					},
					"challenge": {
						"type": "string",
						"description": "Challenge could be undefined if the solution doesn't have a challenge associated"
					},
					"is_private": {
						"type": "boolean",
						"description": "if committee allow to user choose solution privacity"
					}
				},
				"required": [
					"title",
					"description",
					"images",
					"WSALevel",
					"file_complementary",
					"author"
				],
				"type": "object",
				"additionalProperties": true
			},
			"TeamI": {
				"properties": {
					"teamId": {
						"type": "string"
					},
					"creator": {
						"$ref": "#/components/schemas/UserI"
					},
					"members": {
						"items": {
							"$ref": "#/components/schemas/UserI"
						},
						"type": "array"
					},
					"created": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"teamId",
					"creator",
					"members",
					"created",
					"name"
				],
				"type": "object",
				"additionalProperties": true
			},
			"GroupValidatorI": {
				"properties": {
					"groupValidatorId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"created": {
						"type": "string",
						"format": "date-time"
					},
					"area": {
						"$ref": "#/components/schemas/AreaI"
					}
				},
				"required": [
					"groupValidatorId",
					"name",
					"created",
					"area"
				],
				"type": "object",
				"additionalProperties": true
			},
			"ChallengeI": {
				"properties": {
					"_id": {},
					"insertedBy": {
						"$ref": "#/components/schemas/UserI",
						"description": "When the inserted user is not same that author user. \nUsed for committe (Committe integrants has \na Functionality for add generator's challenge)"
					},
					"author": {
						"$ref": "#/components/schemas/UserI",
						"description": "Generator that create the solution. \nThis field exclusive with team configuration"
					},
					"team": {
						"$ref": "#/components/schemas/TeamI",
						"description": "Team that propose the solution. Just available for challenges\nwith TEAMWORK active.\nThis field exclusive with author and coauthor configuration"
					},
					"created": {
						"type": "string",
						"format": "date-time",
						"description": "Solution creation date"
					},
					"updated": {
						"type": "string",
						"format": "date-time",
						"description": "Solution update date"
					},
					"title": {
						"type": "string",
						"description": "Situation title"
					},
					"description": {
						"type": "string",
						"description": "Solution description"
					},
					"active": {
						"type": "boolean",
						"description": "Flag that indicate if a solution is active.\nWhen a challenge is delete, the flag is false"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Solution images"
					},
					"WSALevel": {
						"type": "string",
						"enum": [
							"COMPANY",
							"AREA"
						],
						"description": "WorkSpaceAvailable.\nIf the situation is available for all company or just for some areas."
					},
					"areasAvailable": {
						"items": {
							"$ref": "#/components/schemas/AreaI"
						},
						"type": "array",
						"description": "Areas available. Is user if WSALevel = AREA because a situation isn't available for all Company. Just for some areas."
					},
					"departmentAffected": {
						"items": {
							"$ref": "#/components/schemas/AreaI"
						},
						"type": "array",
						"description": "Departments Affected"
					},
					"groupValidator": {
						"$ref": "#/components/schemas/GroupValidatorI",
						"description": "Group that do the analysis about the situation"
					},
					"status": {
						"type": "string",
						"description": "Challenge | Problem | Solution Status: @TODO define situation challenge"
					},
					"fileComplementary": {
						"type": "string",
						"description": "Complementary files to challenge, solution or problem"
					},
					"reactions": {
						"properties": {
							"comments": {
								"type": "number",
								"format": "double"
							},
							"confused": {
								"type": "number",
								"format": "double"
							},
							"likes": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"comments",
							"confused",
							"likes"
						],
						"type": "object",
						"description": "Reactions in park"
					},
					"challengeId": {
						"type": "string",
						"description": "Id that uniquely identifies a challenge"
					},
					"isStrategic": {
						"type": "boolean",
						"description": "If challenge response to strategic organization need."
					},
					"timePeriod": {
						"type": "number",
						"format": "double",
						"description": "TimePeriod that challenge is in a Park for discussion. Dimenention is in hours. \nThen a challenge will be in a park Challenge create + timePeriod"
					},
					"participationMode": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Participation mode accepted: could be INDIVIDUAL_WITH_COAUTHORSHIP and/or TEAM"
					}
				},
				"required": [
					"insertedBy",
					"created",
					"title",
					"description",
					"active",
					"images",
					"WSALevel",
					"status",
					"fileComplementary",
					"challengeId",
					"isStrategic",
					"timePeriod",
					"participationMode"
				],
				"type": "object",
				"additionalProperties": true
			},
			"SolutionI": {
				"properties": {
					"_id": {},
					"insertedBy": {
						"$ref": "#/components/schemas/UserI",
						"description": "When the inserted user is not same that author user. \nUsed for committe (Committe integrants has \na Functionality for add generator's challenge)"
					},
					"author": {
						"$ref": "#/components/schemas/UserI",
						"description": "Generator that create the solution. \nThis field exclusive with team configuration"
					},
					"team": {
						"$ref": "#/components/schemas/TeamI",
						"description": "Team that propose the solution. Just available for challenges\nwith TEAMWORK active.\nThis field exclusive with author and coauthor configuration"
					},
					"created": {
						"type": "string",
						"format": "date-time",
						"description": "Solution creation date"
					},
					"updated": {
						"type": "string",
						"format": "date-time",
						"description": "Solution update date"
					},
					"title": {
						"type": "string",
						"description": "Situation title"
					},
					"description": {
						"type": "string",
						"description": "Solution description"
					},
					"active": {
						"type": "boolean",
						"description": "Flag that indicate if a solution is active.\nWhen a challenge is delete, the flag is false"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Solution images"
					},
					"WSALevel": {
						"type": "string",
						"enum": [
							"COMPANY",
							"AREA"
						],
						"description": "WorkSpaceAvailable.\nIf the situation is available for all company or just for some areas."
					},
					"areasAvailable": {
						"items": {
							"$ref": "#/components/schemas/AreaI"
						},
						"type": "array",
						"description": "Areas available. Is user if WSALevel = AREA because a situation isn't available for all Company. Just for some areas."
					},
					"departmentAffected": {
						"items": {
							"$ref": "#/components/schemas/AreaI"
						},
						"type": "array",
						"description": "Departments Affected"
					},
					"groupValidator": {
						"$ref": "#/components/schemas/GroupValidatorI",
						"description": "Group that do the analysis about the situation"
					},
					"status": {
						"type": "string",
						"description": "Challenge | Problem | Solution Status: @TODO define situation challenge"
					},
					"fileComplementary": {
						"type": "string",
						"description": "Complementary files to challenge, solution or problem"
					},
					"reactions": {
						"properties": {
							"comments": {
								"type": "number",
								"format": "double"
							},
							"confused": {
								"type": "number",
								"format": "double"
							},
							"likes": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"comments",
							"confused",
							"likes"
						],
						"type": "object",
						"description": "Reactions in park"
					},
					"solutionId": {
						"type": "string",
						"description": "Id that uniquely identifies a solution"
					},
					"challengeId": {
						"type": "string",
						"description": "Id that identify the challenge associated. If undefinedn then solution\nwas an initiative of a generator"
					},
					"challenge": {
						"$ref": "#/components/schemas/ChallengeI",
						"description": "Challenge Object. challengeId refer to challenge attribute. \nThe redundace is for performance lookup (for example Solutions with a particular challengeId)"
					},
					"canChooseScope": {
						"type": "boolean",
						"description": "If true, solution's generator can choose if the \nsolution is shared with the community"
					},
					"isPrivate": {
						"type": "boolean",
						"description": "Solution is shared with the community?"
					},
					"timeInPark": {
						"type": "number",
						"format": "double",
						"description": "TimePeriod that challenge is in a Park for discussion"
					}
				},
				"required": [
					"insertedBy",
					"created",
					"title",
					"description",
					"active",
					"images",
					"WSALevel",
					"status",
					"fileComplementary",
					"solutionId",
					"canChooseScope",
					"isPrivate",
					"timeInPark"
				],
				"type": "object",
				"additionalProperties": true
			},
			"ChallengeResponse": {
				"properties": {
					"inserted_by": {
						"$ref": "#/components/schemas/UserResponse",
						"description": "User that inserted the solution"
					},
					"author": {
						"$ref": "#/components/schemas/UserResponse"
					},
					"created": {
						"type": "string",
						"format": "date-time"
					},
					"status": {
						"type": "string"
					},
					"updated": {
						"type": "string",
						"format": "date-time"
					},
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"WSALevel": {
						"type": "string"
					},
					"file_complementary": {
						"type": "string"
					},
					"reactions": {
						"properties": {
							"comments": {
								"type": "number",
								"format": "double"
							},
							"confused": {
								"type": "number",
								"format": "double"
							},
							"likes": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"comments",
							"confused",
							"likes"
						],
						"type": "object"
					},
					"is_strategic": {
						"type": "boolean"
					},
					"time_period": {
						"type": "number",
						"format": "double"
					},
					"participation_mode": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"inserted_by",
					"created",
					"status",
					"updated",
					"title",
					"description",
					"images",
					"WSALevel",
					"file_complementary",
					"reactions",
					"is_strategic",
					"time_period",
					"participation_mode"
				],
				"type": "object",
				"additionalProperties": true
			},
			"ChallengeBody": {
				"description": "Data that can be edited or inserted. Other are edited by \nanother endpoints",
				"properties": {
					"author": {
						"type": "string",
						"description": "author is required for a challenge"
					},
					"coauthor": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Not used for challenge"
					},
					"team": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"WSALevel": {
						"type": "string",
						"enum": [
							"COMPANY",
							"AREA"
						]
					},
					"group_validator": {
						"type": "string"
					},
					"file_complementary": {
						"type": "string"
					},
					"is_strategic": {
						"type": "boolean"
					},
					"participation_mode": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"title",
					"description",
					"images",
					"WSALevel",
					"file_complementary",
					"author",
					"is_strategic",
					"participation_mode"
				],
				"type": "object",
				"additionalProperties": true
			},
			"HubI": {
				"properties": {
					"_id": {},
					"hubId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"active": {
						"type": "boolean"
					}
				},
				"required": [
					"hubId",
					"name",
					"active"
				],
				"type": "object",
				"additionalProperties": true
			},
			"CompanyBody": {
				"properties": {
					"name": {
						"type": "string"
					},
					"CNPJ": {
						"type": "string"
					},
					"hub": {
						"items": {
							"$ref": "#/components/schemas/HubI"
						},
						"type": "array"
					}
				},
				"required": [
					"name",
					"CNPJ"
				],
				"type": "object",
				"additionalProperties": true
			},
			"CommitteI": {
				"properties": {
					"active": {
						"type": "boolean"
					},
					"leader": {
						"$ref": "#/components/schemas/UserI"
					},
					"general": {
						"items": {
							"$ref": "#/components/schemas/UserI"
						},
						"type": "array"
					}
				},
				"required": [
					"active"
				],
				"type": "object",
				"additionalProperties": true
			},
			"GroupValidatorBody": {
				"properties": {
					"name": {
						"type": "string"
					},
					"validators": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"area": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"validators",
					"area"
				],
				"type": "object",
				"additionalProperties": true
			},
			"IntegrantI": {
				"properties": {
					"user": {
						"$ref": "#/components/schemas/UserI",
						"description": "Validator User"
					},
					"integrantId": {
						"type": "string",
						"description": "committe integrant Id"
					},
					"active": {
						"type": "boolean",
						"description": "is active?"
					},
					"created": {
						"type": "string",
						"format": "date-time",
						"description": "When was created?"
					},
					"lastChangePosition": {
						"type": "string",
						"format": "date-time",
						"description": "Date of the last change of position in the committe. \nFor example from LEADER to GENERAL or GENERAL to leader"
					},
					"finished": {
						"type": "string",
						"format": "date-time",
						"description": "Date end"
					},
					"groupValidator": {
						"$ref": "#/components/schemas/GroupValidatorI",
						"description": "committe integrant can be part of group validator\n. Just Committe integrants can be validators"
					},
					"role": {
						"type": "string",
						"description": "What is the role? Committe General or Committe Leader"
					}
				},
				"required": [
					"user",
					"integrantId",
					"active",
					"created",
					"lastChangePosition",
					"role"
				],
				"type": "object",
				"additionalProperties": true
			},
			"TeamResponse": {
				"properties": {
					"team_id": {
						"type": "string"
					},
					"creator": {
						"$ref": "#/components/schemas/UserResponse"
					},
					"members": {
						"items": {
							"$ref": "#/components/schemas/UserResponse"
						},
						"type": "array"
					},
					"name": {
						"type": "string"
					},
					"created": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"team_id",
					"creator",
					"members",
					"name",
					"created"
				],
				"type": "object",
				"additionalProperties": true
			},
			"TeamBody": {
				"properties": {
					"creator": {
						"type": "string"
					},
					"members": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"creator",
					"members",
					"name"
				],
				"type": "object",
				"additionalProperties": true
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "ideation_backend",
		"version": "1.0.0",
		"description": "ideation backend",
		"license": {
			"name": "ISC"
		},
		"contact": {
			"name": "Clara Idea"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/area": {
			"post": {
				"operationId": "NewArea",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AreaI"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AreaBody"
							}
						}
					}
				}
			}
		},
		"/user/signup": {
			"post": {
				"operationId": "SignUp",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserI"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserBody"
							}
						}
					}
				}
			}
		},
		"/user/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Login"
							}
						}
					}
				}
			}
		},
		"/user/{userId}": {
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/user/info": {
			"get": {
				"operationId": "GetInformation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					}
				},
				"description": "User information",
				"security": [],
				"parameters": []
			}
		},
		"/solution": {
			"post": {
				"operationId": "NewSolution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SolutionResponse"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SolutionBody"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "ListSolutions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SolutionResponse"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": {}
									}
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/solution/{solutionId}": {
			"patch": {
				"operationId": "UpdateSolutionPartially",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SolutionI"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "solutionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SolutionBody"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteSolution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "solutionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"get": {
				"operationId": "GetSolution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SolutionResponse"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "solutionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/challenge": {
			"post": {
				"operationId": "NewChallenge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChallengeResponse"
								}
							}
						}
					}
				},
				"description": "New Challenge method",
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "Challenge definition according to ChallengeBody",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChallengeBody"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "ListChallenges",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ChallengeResponse"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Challenge listing",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "query",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/challenge/{challengeId}/solution": {
			"post": {
				"operationId": "NewSolution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SolutionResponse"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "challengeId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChallengeBody"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "ListSolutions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SolutionResponse"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "listing solution's challenge",
				"security": [],
				"parameters": [
					{
						"description": "challenge for listing",
						"in": "path",
						"name": "challengeId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "query",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/challenge/{challengeId}": {
			"get": {
				"operationId": "GetChallenge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChallengeResponse"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "challengeId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateChallengePartially",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChallengeI"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "challengeId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChallengeBody"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteChallenge",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "challengeId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/company": {
			"post": {
				"operationId": "NewCompany",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CompanyI"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CompanyBody"
							}
						}
					}
				}
			}
		},
		"/company/hub/{hubId}": {
			"post": {
				"operationId": "AddToHub",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CompanyI"
								}
							}
						}
					}
				},
				"description": "Endpoint for adding a company to hub.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "hubId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "company that will be added",
					"required": true,
					"content": {
						"application/json": {
							"schema": {}
						}
					}
				}
			},
			"delete": {
				"operationId": "PullToHub",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CompanyI"
								}
							}
						}
					}
				},
				"description": "Endpoint for delete a company from Hub.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "hubId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "company that will be deleted",
					"required": true,
					"content": {
						"application/json": {
							"schema": {}
						}
					}
				}
			}
		},
		"/committe/leader": {
			"post": {
				"operationId": "NewLeader",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CommitteI"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"/committe": {
			"post": {
				"operationId": "NewCommitte",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {}
						}
					}
				}
			}
		},
		"/group-validator": {
			"post": {
				"operationId": "NewGroupValidator",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Fix response",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GroupValidatorBody"
							}
						}
					}
				}
			}
		},
		"/integrant/leader/{integrantId}": {
			"post": {
				"operationId": "NewLeader",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IntegrantI"
								}
							}
						}
					}
				},
				"description": "Endpoint for add or reeplace a leader of committe.\nThe new leader have to be a `general commite` user first",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "integrantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/integrant/general": {
			"post": {
				"operationId": "NewIntegrant",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IntegrantI"
								}
							}
						}
					}
				},
				"description": "Endpoint used for add a new integrant to committe. \nUser could be a new integrant or old integrant with active=false",
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "user that will be converted from generator to commite (GENERAL)",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"/integrant": {
			"get": {
				"operationId": "GetGeneralMembers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IntegrantI"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": []
			}
		},
		"/integrant/general/{integrantId}": {
			"delete": {
				"operationId": "DeleteLeader",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "integrantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/team": {
			"post": {
				"operationId": "NewTeam",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TeamResponse"
								}
							}
						}
					}
				},
				"description": "Create a new Team for a challenge or situation",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TeamBody"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}